using Oxide.Core.Plugins;
using Oxide.Game.Rust.Cui;
using System;
using System.Collections.Generic;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("EconomicsBalanceGUI", "lethal_d0se", "1.1.1", ResourceId = 1670)]
    [Description("Displays a players economics balance on the HUD.")]

    class EconomicsBalanceGUI : RustPlugin
    {
        // Do NOT edit this file, instead edit EconomicsBalanceGUI.json in server/<identity>/oxide/config

        [PluginReference]
        private Plugin Economics;
        private List<ulong> Looters = new List<ulong>();
        private Dictionary<ulong, double> Balances = new Dictionary<ulong, double>();
        private string GUIColor => GetConfig("GUIColor", "0.1 0.1 0.1 0.75");
        private string GUIAnchorMin => GetConfig("GUIAnchorMin", "0.024 0.04");
        private string GUIAnchorMax => GetConfig("GUIAnchorMax", "0.175 0.08");
        private string GUICurrency => GetConfig("GUICurrency", "M");
        private string GUICurrencySize => GetConfig("GUICurrencySize", "12");
        private string GUICurrencyColor => GetConfig("GUICurrencyColor", "1.0 1.0 1.0 1.0");
        private string GUIBalanceSize => GetConfig("GUIBalanceSize", "12");
        private string GUIBalanceColor => GetConfig("GUIBalanceColor", "1.0 1.0 1.0 1.0");

        void OnServerInitialized()
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                timer.Repeat(0.5f, 0, () =>
                {
                    if (Economics.IsLoaded)
                    {
                        foreach (BasePlayer player in BasePlayer.activePlayerList)
                        {
                            double currentBalance = (double)Economics?.Call("GetPlayerMoney", player.userID);

                            if (Balances.ContainsKey(player.userID))
                            {
                                double savedBalance = Balances[player.userID];

                                if (savedBalance != currentBalance)
                                {
                                    if (!Looters.Contains(player.userID))
                                    {
                                        Balances[player.userID] = currentBalance;
                                        GUIRefresh(player);
                                    }
                                }
                            }
                            else
                            {
                                Balances.Add(player.userID, currentBalance);
                                GUIRefresh(player);
                            }
                        }
                    }
                });
            }
        }

        void Init()
        {
            LoadDefaultConfig();
        }

        void Unload()
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                foreach (BasePlayer player in BasePlayer.activePlayerList)
                {
                    GUIDestroy(player);
                }
            }
        }

        protected override void LoadDefaultConfig()
        {
            PrintWarning("Plugin is loading default configuration.");

            Config["GUIColor"] = GUIColor;
            Config["GUIAnchorMin"] = GUIAnchorMin;
            Config["GUIAnchorMax"] = GUIAnchorMax;
            Config["GUICurrency"] = GUICurrency;
            Config["GUICurrencySize"] = GUICurrencySize;
            Config["GUICurrencyColor"] = GUICurrencyColor;
            Config["GUIBalanceSize"] = GUIBalanceSize;
            Config["GUIBalanceColor"] = GUIBalanceColor;

            SaveConfig();
        }

        void OnPlayerInit(BasePlayer player)
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                if (Economics.IsLoaded)
                {
                    Balances.Add(player.userID, (double)Economics?.Call("GetPlayerMoney", player.userID));
                }
            }
        }

        void OnPlayerSleepEnded(BasePlayer player)
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                GUIRefresh(player);
            }
        }

        // TODO: Inventory hook.
        // Figure out how to check if a player has their main inventory open, so we can do Looters.Add(player.userID) & GUIDestroy(player);
        
        void OnPlayerLootEnd(PlayerLoot inventory)
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                BasePlayer player = inventory.GetComponent<BasePlayer>();

                if (player != null && Looters.Contains(player.userID))
                {
                    Looters.Remove(player.userID);
                    GUICreate(player);
                }
            }
        }

        void OnPlayerRespawned(BasePlayer player)
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                GUIDestroy(player);
            }
        }

        void OnPlayerDisconnected(BasePlayer player)
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                GUIDestroy(player);
                Balances.Remove(player.userID);
            }
        }

        void OnLootEntity(BasePlayer looter, BaseEntity target)
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                Looters.Add(looter.userID);
                GUIDestroy(looter);
            }
        }

        void OnLootPlayer(BasePlayer looter, BasePlayer beingLooter)
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                Looters.Add(looter.userID);
                GUIDestroy(looter);
            }
        }

        void OnLootItem(BasePlayer looter, Item lootedItem)
        {
            if (!Economics)
            {
                return;
            }
            else
            {
                Looters.Add(looter.userID);
                GUIDestroy(looter);
            }
        }

        // Interface.

        void GUICreate(BasePlayer player)
        {
            string currentBalance = (Economics.IsLoaded) ? GetFormattedMoney(player) : "...";

            var GUIElement = new CuiElementContainer();
            var GUIBackground = GUIElement.Add(new CuiPanel
            {
                Image =
                {
                    Color = GUIColor
                },
                RectTransform =
                {
                    AnchorMin = GUIAnchorMin,
                    AnchorMax = GUIAnchorMax
                },
                CursorEnabled = false
            }, "HUD/Overlay", "GUIBackground");
            GUIElement.Add(new CuiLabel
            {
                Text =
                {
                    Text = GUICurrency,
                    FontSize = int.Parse(GUICurrencySize),
                    Align = TextAnchor.MiddleCenter,
                    Color = GUICurrencyColor
                },
                RectTransform =
                {
                    AnchorMin = "0 0.1",
                    AnchorMax = "0.15 0.9"
                }
            }, GUIBackground);
            GUIElement.Add(new CuiLabel
            {
                Text =
                {
                    Text = currentBalance,
                    FontSize = int.Parse(GUIBalanceSize),
                    Align = TextAnchor.MiddleCenter,
                    Color = GUIBalanceColor
                },
                RectTransform =
                {
                    AnchorMin = "0.15 0.1",
                    AnchorMax = "1 0.9"
                }
            }, GUIBackground);

            CuiHelper.AddUi(player, GUIElement);
        }

        void GUIDestroy(BasePlayer player)
        {
            CuiHelper.DestroyUi(player, "GUIBackground");
        }

        void GUIRefresh(BasePlayer player)
        {
            GUIDestroy(player);
            GUICreate(player);            
        }

        // Helpers.

        string GetFormattedMoney(BasePlayer player)
        {
            string s = string.Format("{0:C}", (double)Economics?.Call("GetPlayerMoney", player.userID));
            s = s.Substring(1);
            s = s.Remove(s.Length - 3);
            return s;
        }

        T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null)
            {
                return defaultValue;
            }

            return (T)Convert.ChangeType(Config[name], typeof(T));
        }
    }
}